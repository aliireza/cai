import subprocess
from colorama import Fore, Back, Style

class Verification:
    def __init__(self):
        self.code = ""
        self.prompt = "Your task is to create a C++ application to run two C++ functions with symbolic variables generated by KLEE and ensure they are functionally equivalent (i.e., the output is the same); you should use assert for the equivalence check. I will provide you with two C++ functions (original code and improved code; each might also have a main function that you may ignore), and you should only return the full code for an application (including the two functions, a wrapper function to call them with symbolic variables and check their equivalance, and a single main() function containing the code to generate symbolic variabels via KLEE) to be able to run KLEE. no text, please; give me the C++ code only. no extern C"

    def verify(self, compiler, ai, original_code, generated_code):
        if(self.code == ''):
            self.generate_code(compiler, ai, original_code, generated_code)
        return self.se_verification(compiler, original_code, generated_code)

    def generate_code(self, compiler, ai, original_code, generated_code):
        input_compilable = False
        self.prompt = self.prompt + "\n\\original code\n"+original_code + "\n\\improved code\n" + generated_code
        print(Fore.YELLOW + "Generating code..." + Style.RESET_ALL)
        self.code = ai.submit_task( self.prompt, self.code)
        compile_task = "If there is not main; add it and use this code. If there is compilation erros, fix all of them: "
        
        while not input_compilable:
            compilable, error = compiler.compile_code(self.code, SE=1, name='klee_code')
            print((error))
            if not compilable:
                self.code = ai.submit_task(compile_task + error, self.code)
                continue
            input_compilable = True

    def se_verification(self, compiler, original_code, generated_code):
        klee_command = [ 'klee', 'klee_code.bc']
        print(Fore.YELLOW + "Running KLEE..." + Style.RESET_ALL)
        process = subprocess.run(klee_command, text=True, capture_output=True)
        if process.returncode != 0:  # Compilation error
            return False, process.stderr
        return True, None